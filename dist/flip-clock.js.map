{"version":3,"file":"flip-clock.js","sourceRoot":"","sources":["../src/flip-clock.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AACrC,OAAO,EAAa,WAAW,EAAC,MAAM,eAAe,CAAC;AAG/C,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,UAAU;IAAlC;;QAmBL,SAAI,GAAe;YACjB,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE;YAC3B,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC,UAAU,EAAE;YAC/B,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC,UAAU,EAAE;SAChC,CAAC;IAYJ,CAAC;IA5BU,MAAM;QACb,OAAO,IAAI,CAAA;;;;;;;WAOJ,CAAC;IACV,CAAC;IASQ,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,WAAW,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,IAAI,GAAG;gBACV,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE;gBAC3B,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC,UAAU,EAAE;gBAC/B,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC,UAAU,EAAE;aAChC,CAAC;QACJ,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;;AAjCe,gBAAM,GAAG,GAAG,CAAA;;;;GAI3B,AAJqB,CAIpB;AAcF;IADC,OAAO,CAAC,EAAC,OAAO,EAAE,WAAW,EAAC,CAAC;uCAK9B;AAvBS,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CAmCrB","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement} from 'lit/decorators.js';\nimport {ClockFlap} from './clock-flap';\nimport {provide} from '@lit/context';\nimport {TimeStruct, timeContext} from './timeContext';\n\n@customElement('flip-clock')\nexport class FlipClock extends LitElement {\n  static override styles = css`\n    .clock {\n      display: flex;\n    }\n  `;\n\n  override render() {\n    return html` <div class=\"clock\">\n      <clock-flap type=\"hour\" timePosition=\"1\"></clock-flap>\n      <clock-flap type=\"hour\" timePosition=\"2\"></clock-flap>\n      <clock-flap type=\"minute\" timePosition=\"1\"></clock-flap>\n      <clock-flap type=\"minute\" timePosition=\"2\"></clock-flap>\n      <clock-flap type=\"second\" timePosition=\"1\"></clock-flap>\n      <clock-flap type=\"second\" timePosition=\"2\"></clock-flap>\n    </div>`;\n  }\n\n  @provide({context: timeContext})\n  time: TimeStruct = {\n    hour: new Date().getHours(),\n    minute: new Date().getMinutes(),\n    second: new Date().getSeconds(),\n  };\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    setInterval(() => {\n      this.time = {\n        hour: new Date().getHours(),\n        minute: new Date().getMinutes(),\n        second: new Date().getSeconds(),\n      };\n    }, 1000);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'clock-flap': ClockFlap;\n    'flip-clock': FlipClock;\n  }\n}\n"]}